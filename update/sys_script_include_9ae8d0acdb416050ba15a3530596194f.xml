<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_downloads.ExecuteBusinessRule</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This function is the main entry point for the application. It is called by the business rules that respond to a state change in the 'sys_export_set_run' table and when attachments are created, updated or deleted. Once an export is completed, the function is triggered and the attachment is copied from the ecc queue attachment table to an associated download record.</description>
        <name>ExecuteBusinessRule</name>
        <script><![CDATA[function ExecuteBusinessRule(record)
{
	function Debug(strText)
	{
		x_snc_downloads.Debug('ExecuteBusinessRule: '+record.getRecordClassName()+': '+strText);
	}
	function Log(strText)
	{
		x_snc_downloads.Log('ExecuteBusinessRule: '+record.getRecordClassName()+': '+strText);
	}
		
	var RenderValue = x_snc_devtools.RenderValue;
	var IsValidSysId = x_snc_devtools.IsValidSysId;
	var BusinessRuleGetOperation = x_snc_devtools.BusinessRuleGetOperation;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var RenderBytes = x_snc_devtools.RenderBytes;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;


	var strTable = record.getRecordClassName();
	var strOperation = BusinessRuleGetOperation(record);
	
	Debug('Operation: '+strOperation);
	
	if (strTable == 'sys_export_set_run')
	{
		if (strOperation == 'update')
		{
			//Debug('record: '+RenderValue(record));


			// Determine the download record to which the attachment should be added
			var strDownloadSysId = '';
			var grES = new GlideRecord('sys_export_set');
			if (grES.get(record.set))
			{
				strDownloadSysId = grES.x_snc_downloads_download;
			}

			if (IsValidSysId(strDownloadSysId) == false)
			{
				//Debug('The export set does not specify a valid download record: '+strDownloadSysId);
				return;
			}
			else
			{
				//Debug('The export set has defined a download record: '+strDownloadSysId);
				var grEAA = new GlideRecord('ecc_agent_attachment');
				if (grEAA.get(record.ecc_agent_attachment) == true)
				{
					//Debug('ecc_agent_attachment: '+RenderValue(grEAA));


					//var strScript = "return new GlideRecord('sys_attachment');";
					//var RunScriptInGlobalScope = x_snc_devtools.RunScriptInGlobalScope;
					//var grSA = RunScriptInGlobalScope(strScript);
					//Debug('Using RunScriptInGlobalScope to get a GlideRecord for sys_attachment: '+RenderValue(grSA));


					var grSA = new GlideRecord('sys_attachment');
					grSA.orderByDesc('sys_created_on');
					grSA.addQuery('table_name','ecc_agent_attachment');
					grSA.addQuery('table_sys_id',grEAA.sys_id);
					//grSA.setLimit(50);
					grSA.query();
					while (grSA.next())
					{

						// Identify existing attachments of the download record
						var gsa = new GlideSysAttachment();
						var grExistingAttachments = gsa.getAttachments('x_snc_downloads_download', strDownloadSysId);
						while(grExistingAttachments.next())
						{
							Debug('Existing file: '+grExistingAttachments.getValue('file_name'));
							gsa.deleteAttachment(grExistingAttachments.sys_id);
						}
						//Debug('After deleting all existing attachments...');

						grExistingAttachments = gsa.getAttachments('x_snc_downloads_download', strDownloadSysId);
						while(grExistingAttachments.next())
						{
							//Debug('Existing file: '+grExistingAttachments.getValue('file_name'));
						}

						//Debug('...there should not be any attachments left on the download record.');

						// Create the attachment in the download record:

						gsa.copy('ecc_agent_attachment',grEAA.sys_id,'x_snc_downloads_download',strDownloadSysId);
						/*
						Debug('sys_attachment: '+RenderValue(grSA));
						grSA.table_name = 'x_snc_downloads_download';
						grSA.table_sys_id = strDownloadSysId;
						var strSysId = grSA.update();

						Debug('grSA.update() returned: '+RenderValue(strSysId));
						*/

/*
						// Check the new set of attachment associated to the download record

						var grSA2 = new GlideRecord('sys_attachment');
						grSA2.orderByDesc('sys_created_on');
						grSA2.addQuery('table_name','=','x_snc_downloads_download');
						grSA2.addQuery('table_sys_id','=',strDownloadSysId);
						grSA2.query();
						while (grSA2.next())
						{
							//Debug('sys_attachment: '+RenderValue(grSA2));
						}
*/




					}
				}
			}
		}
		return;
	}
	
	
	if (strTable == 'sys_attachment')
	{
		if (record.table_name != 'x_snc_downloads_download')
		{
			return;
		}
		
		var strDownloadSysId = GetStringValue(record.table_sys_id);
		
		if (   strOperation == 'update'
			|| strOperation == 'insert'
			|| strOperation == 'delete')
		{
			Debug(x_snc_devtools.RenderValue(current));

			var grDownload = new GlideRecord('x_snc_downloads_download');
			if (grDownload.get(strDownloadSysId))
			{
				var grSA = new GlideRecord('sys_attachment');
				grSA.addQuery('table_name','=','x_snc_downloads_download');
				grSA.addQuery('table_sys_id','=',strDownloadSysId);
				if (strOperation == 'delete') // if this is called during a delete operation, we do not want to consider this attachment
				{
					grSA.addQuery('sys_id','!=',current.sys_id);
				}
				grSA.query();
				var nTotalSize = 0;
				while (grSA.next())
				{
					nTotalSize += GetIntegerValue(grSA.size_bytes);
				}
				grDownload.attachment_size = RenderBytes(nTotalSize);
				if (nTotalSize == 0)
				{
					grDownload.attachment_updated = '';
				}
				else
				{
					grDownload.attachment_updated = current.sys_updated_on;
				}
				grDownload.update();
			}
			
			
		}
		
		if (strOperation == 'update')
		{
			// One might expect that we should fire the event also when the attachment is inserted,
			// but this would lead to two events being fired...
			
			// Fire an event to inform users about the new file:
			var grD = new GlideRecord('x_snc_downloads_download');
			if (grD.get(strDownloadSysId))
			{
				if (grD.active == true)
				{
					//Debug('Triggering event on download: '+RenderValue(grD));
					gs.eventQueue('x_snc_downloads.download.updated',grD,grD.attachment_updated,'');
					// HINT: In the email text, use ${event.parm1} and ${event.parm2} to refer to the parameters!
				}
			}
		}
		return;
	}
	return;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-12-09 11:29:36</sys_created_on>
        <sys_id>9ae8d0acdb416050ba15a3530596194f</sys_id>
        <sys_mod_count>41</sys_mod_count>
        <sys_name>ExecuteBusinessRule</sys_name>
        <sys_package display_value="Downloads WORK IN PROGRESS" source="x_snc_downloads">1d2ada8c1b09ec10a89720a8ec4bcb79</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Downloads WORK IN PROGRESS">1d2ada8c1b09ec10a89720a8ec4bcb79</sys_scope>
        <sys_update_name>sys_script_include_9ae8d0acdb416050ba15a3530596194f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-05-20 09:44:11</sys_updated_on>
    </sys_script_include>
</record_update>
